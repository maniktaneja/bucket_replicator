// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/manik_taneja/object_replicator/proto/replicator.proto

/*
Package replicator is a generated protocol buffer package.

It is generated from these files:
	github.com/manik_taneja/object_replicator/proto/replicator.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	StartReplicationRequest
	StartReplicationResponse
	ReplicationRequest
	ReplicationResponse
	ReplicationEndpoint
	ListEndpointsResponse
*/
package replicator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RepError int32

const (
	RepError_RepNoError RepError = 0
)

var RepError_name = map[int32]string{
	0: "RepNoError",
}
var RepError_value = map[string]int32{
	"RepNoError": 0,
}

func (x RepError) String() string {
	return proto.EnumName(RepError_name, int32(x))
}
func (RepError) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloResponse struct {
	Greeting string `protobuf:"bytes,2,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

type StartReplicationRequest struct {
	SrcEndpoint  string `protobuf:"bytes,1,opt,name=src_endpoint,json=srcEndpoint" json:"src_endpoint,omitempty"`
	SrcAccessKey string `protobuf:"bytes,2,opt,name=src_access_key,json=srcAccessKey" json:"src_access_key,omitempty"`
	SrcSecretKey string `protobuf:"bytes,3,opt,name=src_secret_key,json=srcSecretKey" json:"src_secret_key,omitempty"`
	DstEndpoint  string `protobuf:"bytes,4,opt,name=dst_endpoint,json=dstEndpoint" json:"dst_endpoint,omitempty"`
	DstAccessKey string `protobuf:"bytes,5,opt,name=dst_access_key,json=dstAccessKey" json:"dst_access_key,omitempty"`
	DstSecretKey string `protobuf:"bytes,6,opt,name=dst_secret_key,json=dstSecretKey" json:"dst_secret_key,omitempty"`
	Bucket       string `protobuf:"bytes,7,opt,name=bucket" json:"bucket,omitempty"`
}

func (m *StartReplicationRequest) Reset()                    { *m = StartReplicationRequest{} }
func (m *StartReplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*StartReplicationRequest) ProtoMessage()               {}
func (*StartReplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StartReplicationRequest) GetSrcEndpoint() string {
	if m != nil {
		return m.SrcEndpoint
	}
	return ""
}

func (m *StartReplicationRequest) GetSrcAccessKey() string {
	if m != nil {
		return m.SrcAccessKey
	}
	return ""
}

func (m *StartReplicationRequest) GetSrcSecretKey() string {
	if m != nil {
		return m.SrcSecretKey
	}
	return ""
}

func (m *StartReplicationRequest) GetDstEndpoint() string {
	if m != nil {
		return m.DstEndpoint
	}
	return ""
}

func (m *StartReplicationRequest) GetDstAccessKey() string {
	if m != nil {
		return m.DstAccessKey
	}
	return ""
}

func (m *StartReplicationRequest) GetDstSecretKey() string {
	if m != nil {
		return m.DstSecretKey
	}
	return ""
}

func (m *StartReplicationRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

type StartReplicationResponse struct {
	Error         RepError `protobuf:"varint,1,opt,name=error,enum=RepError" json:"error,omitempty"`
	ReplicationId string   `protobuf:"bytes,2,opt,name=replication_id,json=replicationId" json:"replication_id,omitempty"`
}

func (m *StartReplicationResponse) Reset()                    { *m = StartReplicationResponse{} }
func (m *StartReplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*StartReplicationResponse) ProtoMessage()               {}
func (*StartReplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StartReplicationResponse) GetError() RepError {
	if m != nil {
		return m.Error
	}
	return RepError_RepNoError
}

func (m *StartReplicationResponse) GetReplicationId() string {
	if m != nil {
		return m.ReplicationId
	}
	return ""
}

// Generic replication request/response messages
type ReplicationRequest struct {
	ReplicationId string `protobuf:"bytes,1,opt,name=replication_id,json=replicationId" json:"replication_id,omitempty"`
}

func (m *ReplicationRequest) Reset()                    { *m = ReplicationRequest{} }
func (m *ReplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplicationRequest) ProtoMessage()               {}
func (*ReplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReplicationRequest) GetReplicationId() string {
	if m != nil {
		return m.ReplicationId
	}
	return ""
}

type ReplicationResponse struct {
	Error RepError `protobuf:"varint,1,opt,name=error,enum=RepError" json:"error,omitempty"`
}

func (m *ReplicationResponse) Reset()                    { *m = ReplicationResponse{} }
func (m *ReplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*ReplicationResponse) ProtoMessage()               {}
func (*ReplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReplicationResponse) GetError() RepError {
	if m != nil {
		return m.Error
	}
	return RepError_RepNoError
}

type ReplicationEndpoint struct {
	SrcEndpoint   string `protobuf:"bytes,1,opt,name=src_endpoint,json=srcEndpoint" json:"src_endpoint,omitempty"`
	DstEndpoint   string `protobuf:"bytes,2,opt,name=dst_endpoint,json=dstEndpoint" json:"dst_endpoint,omitempty"`
	Bucket        string `protobuf:"bytes,3,opt,name=bucket" json:"bucket,omitempty"`
	State         string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	ReplicationId string `protobuf:"bytes,5,opt,name=ReplicationId" json:"ReplicationId,omitempty"`
}

func (m *ReplicationEndpoint) Reset()                    { *m = ReplicationEndpoint{} }
func (m *ReplicationEndpoint) String() string            { return proto.CompactTextString(m) }
func (*ReplicationEndpoint) ProtoMessage()               {}
func (*ReplicationEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReplicationEndpoint) GetSrcEndpoint() string {
	if m != nil {
		return m.SrcEndpoint
	}
	return ""
}

func (m *ReplicationEndpoint) GetDstEndpoint() string {
	if m != nil {
		return m.DstEndpoint
	}
	return ""
}

func (m *ReplicationEndpoint) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *ReplicationEndpoint) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ReplicationEndpoint) GetReplicationId() string {
	if m != nil {
		return m.ReplicationId
	}
	return ""
}

type ListEndpointsResponse struct {
	Error                RepError               `protobuf:"varint,1,opt,name=error,enum=RepError" json:"error,omitempty"`
	ReplicationEndpoints []*ReplicationEndpoint `protobuf:"bytes,2,rep,name=replication_endpoints,json=replicationEndpoints" json:"replication_endpoints,omitempty"`
}

func (m *ListEndpointsResponse) Reset()                    { *m = ListEndpointsResponse{} }
func (m *ListEndpointsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListEndpointsResponse) ProtoMessage()               {}
func (*ListEndpointsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListEndpointsResponse) GetError() RepError {
	if m != nil {
		return m.Error
	}
	return RepError_RepNoError
}

func (m *ListEndpointsResponse) GetReplicationEndpoints() []*ReplicationEndpoint {
	if m != nil {
		return m.ReplicationEndpoints
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "HelloResponse")
	proto.RegisterType((*StartReplicationRequest)(nil), "StartReplicationRequest")
	proto.RegisterType((*StartReplicationResponse)(nil), "StartReplicationResponse")
	proto.RegisterType((*ReplicationRequest)(nil), "ReplicationRequest")
	proto.RegisterType((*ReplicationResponse)(nil), "ReplicationResponse")
	proto.RegisterType((*ReplicationEndpoint)(nil), "ReplicationEndpoint")
	proto.RegisterType((*ListEndpointsResponse)(nil), "ListEndpointsResponse")
	proto.RegisterEnum("RepError", RepError_name, RepError_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Replicator service

type ReplicatorClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error)
	StartReplication(ctx context.Context, in *StartReplicationRequest, opts ...client.CallOption) (*StartReplicationResponse, error)
	StopReplication(ctx context.Context, in *ReplicationRequest, opts ...client.CallOption) (*ReplicationResponse, error)
	ResumeReplication(ctx context.Context, in *ReplicationRequest, opts ...client.CallOption) (*ReplicationResponse, error)
	ListEndpoints(ctx context.Context, in *ReplicationRequest, opts ...client.CallOption) (*ListEndpointsResponse, error)
}

type replicatorClient struct {
	c           client.Client
	serviceName string
}

func NewReplicatorClient(serviceName string, c client.Client) ReplicatorClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "replicator"
	}
	return &replicatorClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *replicatorClient) Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Replicator.Hello", in)
	out := new(HelloResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) StartReplication(ctx context.Context, in *StartReplicationRequest, opts ...client.CallOption) (*StartReplicationResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Replicator.StartReplication", in)
	out := new(StartReplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) StopReplication(ctx context.Context, in *ReplicationRequest, opts ...client.CallOption) (*ReplicationResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Replicator.StopReplication", in)
	out := new(ReplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) ResumeReplication(ctx context.Context, in *ReplicationRequest, opts ...client.CallOption) (*ReplicationResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Replicator.ResumeReplication", in)
	out := new(ReplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) ListEndpoints(ctx context.Context, in *ReplicationRequest, opts ...client.CallOption) (*ListEndpointsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Replicator.ListEndpoints", in)
	out := new(ListEndpointsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Replicator service

type ReplicatorHandler interface {
	Hello(context.Context, *HelloRequest, *HelloResponse) error
	StartReplication(context.Context, *StartReplicationRequest, *StartReplicationResponse) error
	StopReplication(context.Context, *ReplicationRequest, *ReplicationResponse) error
	ResumeReplication(context.Context, *ReplicationRequest, *ReplicationResponse) error
	ListEndpoints(context.Context, *ReplicationRequest, *ListEndpointsResponse) error
}

func RegisterReplicatorHandler(s server.Server, hdlr ReplicatorHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Replicator{hdlr}, opts...))
}

type Replicator struct {
	ReplicatorHandler
}

func (h *Replicator) Hello(ctx context.Context, in *HelloRequest, out *HelloResponse) error {
	return h.ReplicatorHandler.Hello(ctx, in, out)
}

func (h *Replicator) StartReplication(ctx context.Context, in *StartReplicationRequest, out *StartReplicationResponse) error {
	return h.ReplicatorHandler.StartReplication(ctx, in, out)
}

func (h *Replicator) StopReplication(ctx context.Context, in *ReplicationRequest, out *ReplicationResponse) error {
	return h.ReplicatorHandler.StopReplication(ctx, in, out)
}

func (h *Replicator) ResumeReplication(ctx context.Context, in *ReplicationRequest, out *ReplicationResponse) error {
	return h.ReplicatorHandler.ResumeReplication(ctx, in, out)
}

func (h *Replicator) ListEndpoints(ctx context.Context, in *ReplicationRequest, out *ListEndpointsResponse) error {
	return h.ReplicatorHandler.ListEndpoints(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/manik_taneja/object_replicator/proto/replicator.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x4e, 0x9c, 0x26, 0xb4, 0xd3, 0xd8, 0x94, 0x6d, 0x5a, 0x4c, 0x2e, 0xb4, 0xab, 0x22, 0x45,
	0x20, 0x6d, 0xa4, 0x20, 0x71, 0x41, 0xaa, 0xca, 0xa1, 0x12, 0x11, 0x88, 0x83, 0xf3, 0x00, 0x96,
	0x7f, 0x46, 0xc1, 0x4d, 0xe2, 0x35, 0xbb, 0x9b, 0x43, 0xcf, 0x3c, 0x00, 0x8f, 0xc2, 0x43, 0xf0,
	0x62, 0xc8, 0x9b, 0x4d, 0xbc, 0x6e, 0x5c, 0xa9, 0xea, 0xcd, 0xf3, 0xf9, 0x9b, 0xf9, 0xd6, 0xdf,
	0xb7, 0x63, 0xb8, 0x99, 0x67, 0xea, 0xe7, 0x3a, 0x66, 0x09, 0x5f, 0x8d, 0x57, 0x51, 0x9e, 0x2d,
	0x42, 0x15, 0xe5, 0x78, 0x17, 0x8d, 0x79, 0x7c, 0x87, 0x89, 0x0a, 0x05, 0x16, 0xcb, 0x2c, 0x89,
	0x14, 0x17, 0xe3, 0x42, 0x70, 0xc5, 0xc7, 0x15, 0xc0, 0x34, 0x40, 0x29, 0xf4, 0xbf, 0xe2, 0x72,
	0xc9, 0x03, 0xfc, 0xb5, 0x46, 0xa9, 0x08, 0x81, 0x83, 0x3c, 0x5a, 0xa1, 0xdf, 0xbe, 0x68, 0x8f,
	0x8e, 0x02, 0xfd, 0x4c, 0x3f, 0x80, 0x6b, 0x38, 0xb2, 0xe0, 0xb9, 0x44, 0x32, 0x84, 0xc3, 0xb9,
	0x40, 0x54, 0x59, 0x3e, 0xf7, 0x1d, 0x4d, 0xdc, 0xd5, 0xf4, 0x8f, 0x03, 0xaf, 0x67, 0x2a, 0x12,
	0x2a, 0x30, 0x52, 0x19, 0xcf, 0xb7, 0xc3, 0x2f, 0xa1, 0x2f, 0x45, 0x12, 0x62, 0x9e, 0x16, 0x3c,
	0xcb, 0x95, 0x11, 0x39, 0x96, 0x22, 0xb9, 0x35, 0x10, 0xb9, 0x02, 0xaf, 0xa4, 0x44, 0x49, 0x82,
	0x52, 0x86, 0x0b, 0xbc, 0x37, 0x02, 0x65, 0xe3, 0x17, 0x0d, 0x7e, 0xc3, 0xfb, 0x2d, 0x4b, 0x62,
	0x22, 0x50, 0x69, 0x56, 0x67, 0xc7, 0x9a, 0x69, 0xb0, 0x64, 0x5d, 0x42, 0x3f, 0x95, 0xaa, 0x92,
	0x3b, 0xd8, 0xc8, 0xa5, 0x52, 0xd9, 0x72, 0x25, 0xc5, 0x92, 0xeb, 0x6e, 0x06, 0xa5, 0x52, 0xd5,
	0xe4, 0x4a, 0x96, 0x25, 0xd7, 0xdb, 0xb1, 0x2a, 0xb9, 0x73, 0xe8, 0xc5, 0xeb, 0x64, 0x81, 0xca,
	0x7f, 0xa1, 0xdf, 0x9a, 0x8a, 0xc6, 0xe0, 0xef, 0x1b, 0x62, 0x9c, 0x7c, 0x0b, 0x5d, 0x14, 0x82,
	0x0b, 0x6d, 0x85, 0x37, 0x39, 0x62, 0x01, 0x16, 0xb7, 0x25, 0x10, 0x6c, 0x70, 0xf2, 0x0e, 0x3c,
	0x51, 0xf5, 0x85, 0x59, 0x6a, 0xfc, 0x70, 0x2d, 0x74, 0x9a, 0xd2, 0xcf, 0x40, 0x1a, 0xfc, 0xde,
	0x6f, 0x6e, 0x37, 0x35, 0x7f, 0x82, 0xd3, 0xe7, 0x9c, 0x8d, 0xfe, 0x6d, 0xd7, 0x1a, 0x77, 0xa6,
	0x3e, 0x21, 0xe6, 0x87, 0xd1, 0x38, 0xfb, 0xd1, 0x54, 0x76, 0x76, 0x6c, 0x3b, 0xc9, 0x00, 0xba,
	0x52, 0x45, 0x0a, 0x4d, 0x9c, 0x9b, 0x82, 0x5c, 0x81, 0x1b, 0xd8, 0x1f, 0x65, 0x72, 0xac, 0x83,
	0xf4, 0x77, 0x1b, 0xce, 0xbe, 0x67, 0x95, 0x88, 0x7c, 0x7a, 0x10, 0x53, 0x38, 0xb3, 0xbd, 0xdc,
	0x9e, 0x5c, 0xfa, 0xce, 0x45, 0x67, 0x74, 0x3c, 0x19, 0xb0, 0x06, 0x27, 0x82, 0x81, 0xd8, 0x07,
	0xe5, 0xfb, 0x21, 0x1c, 0x6e, 0xa7, 0x13, 0x0f, 0x20, 0xc0, 0xe2, 0x07, 0xd7, 0xd5, 0x49, 0x6b,
	0xf2, 0xcf, 0xd1, 0x80, 0x59, 0x52, 0x32, 0x82, 0xae, 0x5e, 0x3d, 0xe2, 0x32, 0x7b, 0x4d, 0x87,
	0x1e, 0xab, 0x6d, 0x24, 0x6d, 0x91, 0x29, 0x9c, 0x3c, 0xbc, 0x65, 0xc4, 0x67, 0x8f, 0x6c, 0xe2,
	0xf0, 0x0d, 0x7b, 0xec, 0x4a, 0xd2, 0x16, 0xb9, 0x86, 0x97, 0x33, 0xc5, 0x0b, 0x7b, 0xd2, 0x29,
	0x6b, 0x18, 0x32, 0x60, 0xcd, 0xfd, 0x37, 0xf0, 0x2a, 0x40, 0xb9, 0x5e, 0xe1, 0xb3, 0x27, 0x5c,
	0x83, 0x5b, 0x8b, 0xa9, 0xb9, 0xfb, 0x9c, 0x35, 0x66, 0x49, 0x5b, 0x71, 0x4f, 0xff, 0xdc, 0x3e,
	0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xa2, 0x7a, 0x94, 0x20, 0x05, 0x00, 0x00,
}
